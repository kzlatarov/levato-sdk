import type { BaseContract, BytesLike, FunctionFragment, Result, Interface, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "../common";
export interface CErc20StorageInterfaceInterface extends Interface {
    getFunction(nameOrSignature: "accrualBlockNumber" | "admin" | "adminFeeMantissa" | "adminHasRights" | "borrowIndex" | "comptroller" | "decimals" | "feeSeizeShareMantissa" | "interestRateModel" | "ionicAdmin" | "ionicAdminHasRights" | "ionicFeeMantissa" | "name" | "protocolSeizeShareMantissa" | "reserveFactorMantissa" | "symbol" | "totalAdminFees" | "totalBorrows" | "totalIonicFees" | "totalReserves" | "totalSupply" | "underlying"): FunctionFragment;
    encodeFunctionData(functionFragment: "accrualBlockNumber", values?: undefined): string;
    encodeFunctionData(functionFragment: "admin", values?: undefined): string;
    encodeFunctionData(functionFragment: "adminFeeMantissa", values?: undefined): string;
    encodeFunctionData(functionFragment: "adminHasRights", values?: undefined): string;
    encodeFunctionData(functionFragment: "borrowIndex", values?: undefined): string;
    encodeFunctionData(functionFragment: "comptroller", values?: undefined): string;
    encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
    encodeFunctionData(functionFragment: "feeSeizeShareMantissa", values?: undefined): string;
    encodeFunctionData(functionFragment: "interestRateModel", values?: undefined): string;
    encodeFunctionData(functionFragment: "ionicAdmin", values?: undefined): string;
    encodeFunctionData(functionFragment: "ionicAdminHasRights", values?: undefined): string;
    encodeFunctionData(functionFragment: "ionicFeeMantissa", values?: undefined): string;
    encodeFunctionData(functionFragment: "name", values?: undefined): string;
    encodeFunctionData(functionFragment: "protocolSeizeShareMantissa", values?: undefined): string;
    encodeFunctionData(functionFragment: "reserveFactorMantissa", values?: undefined): string;
    encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalAdminFees", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalBorrows", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalIonicFees", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalReserves", values?: undefined): string;
    encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
    encodeFunctionData(functionFragment: "underlying", values?: undefined): string;
    decodeFunctionResult(functionFragment: "accrualBlockNumber", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "adminFeeMantissa", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "adminHasRights", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "borrowIndex", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "comptroller", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "feeSeizeShareMantissa", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "interestRateModel", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ionicAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ionicAdminHasRights", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "ionicFeeMantissa", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "protocolSeizeShareMantissa", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "reserveFactorMantissa", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalAdminFees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalBorrows", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalIonicFees", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalReserves", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
}
export interface CErc20StorageInterface extends BaseContract {
    connect(runner?: ContractRunner | null): CErc20StorageInterface;
    waitForDeployment(): Promise<this>;
    interface: CErc20StorageInterfaceInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    accrualBlockNumber: TypedContractMethod<[], [bigint], "view">;
    admin: TypedContractMethod<[], [string], "view">;
    adminFeeMantissa: TypedContractMethod<[], [bigint], "view">;
    adminHasRights: TypedContractMethod<[], [boolean], "view">;
    borrowIndex: TypedContractMethod<[], [bigint], "view">;
    comptroller: TypedContractMethod<[], [string], "view">;
    decimals: TypedContractMethod<[], [bigint], "view">;
    feeSeizeShareMantissa: TypedContractMethod<[], [bigint], "view">;
    interestRateModel: TypedContractMethod<[], [string], "view">;
    ionicAdmin: TypedContractMethod<[], [string], "view">;
    ionicAdminHasRights: TypedContractMethod<[], [boolean], "view">;
    ionicFeeMantissa: TypedContractMethod<[], [bigint], "view">;
    name: TypedContractMethod<[], [string], "view">;
    protocolSeizeShareMantissa: TypedContractMethod<[], [bigint], "view">;
    reserveFactorMantissa: TypedContractMethod<[], [bigint], "view">;
    symbol: TypedContractMethod<[], [string], "view">;
    totalAdminFees: TypedContractMethod<[], [bigint], "view">;
    totalBorrows: TypedContractMethod<[], [bigint], "view">;
    totalIonicFees: TypedContractMethod<[], [bigint], "view">;
    totalReserves: TypedContractMethod<[], [bigint], "view">;
    totalSupply: TypedContractMethod<[], [bigint], "view">;
    underlying: TypedContractMethod<[], [string], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "accrualBlockNumber"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "admin"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "adminFeeMantissa"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "adminHasRights"): TypedContractMethod<[], [boolean], "view">;
    getFunction(nameOrSignature: "borrowIndex"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "comptroller"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "decimals"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "feeSeizeShareMantissa"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "interestRateModel"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "ionicAdmin"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "ionicAdminHasRights"): TypedContractMethod<[], [boolean], "view">;
    getFunction(nameOrSignature: "ionicFeeMantissa"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "name"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "protocolSeizeShareMantissa"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "reserveFactorMantissa"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "symbol"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "totalAdminFees"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "totalBorrows"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "totalIonicFees"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "totalReserves"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "totalSupply"): TypedContractMethod<[], [bigint], "view">;
    getFunction(nameOrSignature: "underlying"): TypedContractMethod<[], [string], "view">;
    filters: {};
}
