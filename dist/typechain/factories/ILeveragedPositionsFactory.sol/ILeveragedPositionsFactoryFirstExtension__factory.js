"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ILeveragedPositionsFactoryFirstExtension__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        type: "function",
        name: "_setIonicPairWhitelisted",
        inputs: [
            {
                name: "_collateralMarket",
                type: "address",
                internalType: "contract IonicCErc20",
            },
            {
                name: "_stableMarket",
                type: "address",
                internalType: "contract IonicCErc20",
            },
            {
                name: "_whitelisted",
                type: "bool",
                internalType: "bool",
            },
        ],
        outputs: [],
        stateMutability: "nonpayable",
    },
    {
        type: "function",
        name: "createAndFundIonicPosition",
        inputs: [
            {
                name: "_collateralAsset",
                type: "address",
                internalType: "contract IERC20Upgradeable",
            },
            {
                name: "_stableAsset",
                type: "address",
                internalType: "contract IERC20Upgradeable",
            },
            {
                name: "_isShort",
                type: "bool",
                internalType: "bool",
            },
            {
                name: "_fundingAsset",
                type: "address",
                internalType: "contract IERC20Upgradeable",
            },
            {
                name: "_fundingAmount",
                type: "uint256",
                internalType: "uint256",
            },
        ],
        outputs: [
            {
                name: "",
                type: "address",
                internalType: "contract LeveragedPosition",
            },
        ],
        stateMutability: "nonpayable",
    },
    {
        type: "function",
        name: "createAndFundIonicPositionAtRatio",
        inputs: [
            {
                name: "_collateralAsset",
                type: "address",
                internalType: "contract IERC20Upgradeable",
            },
            {
                name: "_stableAsset",
                type: "address",
                internalType: "contract IERC20Upgradeable",
            },
            {
                name: "_isShort",
                type: "bool",
                internalType: "bool",
            },
            {
                name: "_fundingAsset",
                type: "address",
                internalType: "contract IERC20Upgradeable",
            },
            {
                name: "_fundingAmount",
                type: "uint256",
                internalType: "uint256",
            },
            {
                name: "_leverageRatio",
                type: "uint256",
                internalType: "uint256",
            },
        ],
        outputs: [
            {
                name: "",
                type: "address",
                internalType: "contract LeveragedPosition",
            },
        ],
        stateMutability: "nonpayable",
    },
    {
        type: "function",
        name: "createIonicPosition",
        inputs: [
            {
                name: "posOwner",
                type: "address",
                internalType: "address",
            },
            {
                name: "_collateralAsset",
                type: "address",
                internalType: "contract IERC20Upgradeable",
            },
            {
                name: "_stableAsset",
                type: "address",
                internalType: "contract IERC20Upgradeable",
            },
            {
                name: "_isShort",
                type: "bool",
                internalType: "bool",
            },
        ],
        outputs: [
            {
                name: "",
                type: "address",
                internalType: "contract LeveragedPosition",
            },
        ],
        stateMutability: "nonpayable",
    },
    {
        type: "function",
        name: "getAssetBorrowRate",
        inputs: [
            {
                name: "asset",
                type: "address",
                internalType: "address",
            },
        ],
        outputs: [
            {
                name: "",
                type: "uint256",
                internalType: "uint256",
            },
        ],
        stateMutability: "view",
    },
    {
        type: "function",
        name: "getAssetPrice",
        inputs: [
            {
                name: "asset",
                type: "address",
                internalType: "address",
            },
        ],
        outputs: [
            {
                name: "",
                type: "uint256",
                internalType: "uint256",
            },
        ],
        stateMutability: "view",
    },
    {
        type: "function",
        name: "getPositionsByAccount",
        inputs: [
            {
                name: "account",
                type: "address",
                internalType: "address",
            },
        ],
        outputs: [
            {
                name: "",
                type: "address[]",
                internalType: "address[]",
            },
            {
                name: "",
                type: "bool[]",
                internalType: "bool[]",
            },
        ],
        stateMutability: "view",
    },
    {
        type: "function",
        name: "getPositionsTotalCollateralValue",
        inputs: [],
        outputs: [
            {
                name: "",
                type: "uint256",
                internalType: "uint256",
            },
        ],
        stateMutability: "view",
    },
    {
        type: "function",
        name: "initialize",
        inputs: [
            {
                name: "_delegator",
                type: "address",
                internalType: "contract ICreditDelegator",
            },
            {
                name: "_oracle",
                type: "address",
                internalType: "contract MasterPriceOracle",
            },
        ],
        outputs: [],
        stateMutability: "nonpayable",
    },
    {
        type: "function",
        name: "isFactoryPosition",
        inputs: [
            {
                name: "position",
                type: "address",
                internalType: "contract LeveragedPosition",
            },
        ],
        outputs: [
            {
                name: "",
                type: "bool",
                internalType: "bool",
            },
        ],
        stateMutability: "view",
    },
    {
        type: "function",
        name: "reinitialize",
        inputs: [
            {
                name: "_oracle",
                type: "address",
                internalType: "contract MasterPriceOracle",
            },
        ],
        outputs: [],
        stateMutability: "nonpayable",
    },
    {
        type: "event",
        name: "PositionCreated",
        inputs: [
            {
                name: "user",
                type: "address",
                indexed: true,
                internalType: "address",
            },
            {
                name: "position",
                type: "address",
                indexed: false,
                internalType: "contract LeveragedPosition",
            },
            {
                name: "collateral",
                type: "address",
                indexed: true,
                internalType: "address",
            },
            {
                name: "stable",
                type: "address",
                indexed: true,
                internalType: "address",
            },
            {
                name: "lendingProtocol",
                type: "uint16",
                indexed: false,
                internalType: "uint16",
            },
        ],
        anonymous: false,
    },
];
class ILeveragedPositionsFactoryFirstExtension__factory {
    static abi = _abi;
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.ILeveragedPositionsFactoryFirstExtension__factory = ILeveragedPositionsFactoryFirstExtension__factory;
