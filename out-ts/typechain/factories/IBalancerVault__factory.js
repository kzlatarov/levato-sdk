"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IBalancerVault__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        type: "function",
        name: "exitPool",
        inputs: [
            {
                name: "poolId",
                type: "bytes32",
                internalType: "bytes32",
            },
            {
                name: "sender",
                type: "address",
                internalType: "address",
            },
            {
                name: "recipient",
                type: "address",
                internalType: "address payable",
            },
            {
                name: "request",
                type: "tuple",
                internalType: "struct ExitPoolRequest",
                components: [
                    {
                        name: "assets",
                        type: "address[]",
                        internalType: "contract IERC20Upgradeable[]",
                    },
                    {
                        name: "minAmountsOut",
                        type: "uint256[]",
                        internalType: "uint256[]",
                    },
                    {
                        name: "userData",
                        type: "bytes",
                        internalType: "bytes",
                    },
                    {
                        name: "toInternalBalance",
                        type: "bool",
                        internalType: "bool",
                    },
                ],
            },
        ],
        outputs: [],
        stateMutability: "nonpayable",
    },
    {
        type: "function",
        name: "getPoolTokens",
        inputs: [
            {
                name: "poolId",
                type: "bytes32",
                internalType: "bytes32",
            },
        ],
        outputs: [
            {
                name: "tokens",
                type: "address[]",
                internalType: "contract IERC20Upgradeable[]",
            },
            {
                name: "balances",
                type: "uint256[]",
                internalType: "uint256[]",
            },
            {
                name: "lastChangeBlock",
                type: "uint256",
                internalType: "uint256",
            },
        ],
        stateMutability: "view",
    },
    {
        type: "function",
        name: "manageUserBalance",
        inputs: [
            {
                name: "ops",
                type: "tuple[]",
                internalType: "struct UserBalanceOp[]",
                components: [
                    {
                        name: "kind",
                        type: "uint8",
                        internalType: "enum UserBalanceOpKind",
                    },
                    {
                        name: "asset",
                        type: "address",
                        internalType: "contract IAsset",
                    },
                    {
                        name: "amount",
                        type: "uint256",
                        internalType: "uint256",
                    },
                    {
                        name: "sender",
                        type: "address",
                        internalType: "address",
                    },
                    {
                        name: "recipient",
                        type: "address",
                        internalType: "address payable",
                    },
                ],
            },
        ],
        outputs: [],
        stateMutability: "payable",
    },
    {
        type: "function",
        name: "swap",
        inputs: [
            {
                name: "singleSwap",
                type: "tuple",
                internalType: "struct SingleSwap",
                components: [
                    {
                        name: "poolId",
                        type: "bytes32",
                        internalType: "bytes32",
                    },
                    {
                        name: "kind",
                        type: "uint8",
                        internalType: "enum SwapKind",
                    },
                    {
                        name: "assetIn",
                        type: "address",
                        internalType: "contract IAsset",
                    },
                    {
                        name: "assetOut",
                        type: "address",
                        internalType: "contract IAsset",
                    },
                    {
                        name: "amount",
                        type: "uint256",
                        internalType: "uint256",
                    },
                    {
                        name: "userData",
                        type: "bytes",
                        internalType: "bytes",
                    },
                ],
            },
            {
                name: "funds",
                type: "tuple",
                internalType: "struct FundManagement",
                components: [
                    {
                        name: "sender",
                        type: "address",
                        internalType: "address",
                    },
                    {
                        name: "fromInternalBalance",
                        type: "bool",
                        internalType: "bool",
                    },
                    {
                        name: "recipient",
                        type: "address",
                        internalType: "address payable",
                    },
                    {
                        name: "toInternalBalance",
                        type: "bool",
                        internalType: "bool",
                    },
                ],
            },
            {
                name: "limit",
                type: "uint256",
                internalType: "uint256",
            },
            {
                name: "deadline",
                type: "uint256",
                internalType: "uint256",
            },
        ],
        outputs: [
            {
                name: "amountCalculated",
                type: "uint256",
                internalType: "uint256",
            },
        ],
        stateMutability: "nonpayable",
    },
];
class IBalancerVault__factory {
    static abi = _abi;
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.IBalancerVault__factory = IBalancerVault__factory;
